@page "/fetchdata"
@using Modul8_BlazorApp1.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick="ToggleTemperatureUnit">Switch from Celcius to Farenheit</button> <!-- OPG 12.1.2. Knap hvor man kan skifte mellem celcius og fareheit-->
<br />
<br />
Input how many weatherforecasts you want to see.
<input type="number" @bind="UserInput" />
<button @onclick="UpdateAmount2">Update</button>
<br />

<button @onclick="ShowMoreForecasts">Show 5 more</button> <!-- OPG 12.1.7. To knapper som kalder funktioner-->
<button @onclick="ShowMoreLess">Show 5 less</button>
<br />
<br />

<p>Here you can apply, a minimum and maximum temprature</p>

<input type="number" @bind="MinTemperature" placeholder="Minimum temprature">
<input type="number" @bind="MaxTemperature" placeholder="Maksimum temprature">
<button @onclick="ApplyTemperatureFilter">Use filter</button>



@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (@temperatureUnit)</th> <!-- OPG 12.1.2. Denne viser hvilken tempratur er den nuværende -->
                <th>Summary</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
             @for (int i = 0; i < forecasts.Length; i++)
            {
                var forecast = forecasts[i];
                <tr style="background-color: @(i % 2 == 1 ? "gray" : "white")"> <!-- OPG 12.1.2 Hver anden bliver grå -->
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@GetTemperatureInUnit(forecast)</td> <!-- OPG 12.1.2. Denne bruger funktionen til at hente tempraturen. -->
                    <td style="color: @(SummaryTextColor(forecast.Summary))">@forecast.Summary</td> <!-- OPG 12.1.5. Denne bruger funktionen til at farvelæg "Summery" -->
                    <td>@forecast.Location</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string temperatureUnit = "Celsius"; //OPG 12.1.2 
    private int UserInput = 10;  // OPG 12.1.7. Variabel til at vise 5 mere eller 5 færre, men 10 som standard.

    private int MinTemperature = -20; 
    private int MaxTemperature = 55;  


    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}/{MinTemperature}/{MaxTemperature}");
    }

    private string SummaryTextColor(string summary) // Funktionen som farvelægger vores "Summery"
    {
        switch (summary)
        {
            case "Freezing":
            case "Cold":
                return "blue"; // Blå for "Freezing" og "Cold"
            case "Hot":
            case "Warm":
                return "darkred"; // Mørkerød for "Hot" og "Warm"
            default:
                return "green"; // Grøn for alle andre værdier
        }

        /*Ovenstående kan også skrives som if-statement:
        if (summary == "Freezing" || summary == "Cold")
              {
              return "blue"; // Blå baggrund for "Freezing" og "Cold"
               }
               else if (summary == "Hot" || summary == "Warm")
              {
              return "darkred"; // Mørkerød baggrund for "Hot" og "Warm"
               }
               else
               {
               return "green"; // Grøn baggrund for alle andre værdier
    }       */

    }

    private void ToggleTemperatureUnit() // OPG 12.1.2. Denne viser blot teksten om vores nuværende tempratur
    {
        if (temperatureUnit == "Celsius")
        {
            temperatureUnit = "Fahrenheit";
        }
        else
        {
            temperatureUnit = "Celsius";
        }
    }

    private int GetTemperatureInUnit(WeatherForecast forecast) // OPG 12.1.2. Denne henter enten tempraturen i Celcius eller farenheit, fra vores klasse
    {
        if (temperatureUnit == "Celsius")
        {
            return forecast.TemperatureC;
        }
        else
        {     
            return forecast.TemperatureF;
        }
    }

    private async void ShowMoreForecasts() //OPG 12.1.7. Opdatere vores userinput, når man trykker 5 mere.
    {
        UserInput += 5;
        await UpdateAmount();

    }

    private async void ShowMoreLess() //OPG 12.1.7. Opdatere vores userinput, når man trykker 5 færre.
    {
        UserInput -= 5;
        await UpdateAmount();

    }

    private async Task UpdateAmount() //OPG 12.1.7. Funktionen som henter det nye antal af vejrudsigter fra controlleren
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}/{MinTemperature}/{MaxTemperature}");
        StateHasChanged();
    }

    private async Task UpdateAmount2()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}/{MinTemperature}/{MaxTemperature}");
        StateHasChanged();
    }

    private async Task ApplyTemperatureFilter()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}/{MinTemperature}/{MaxTemperature}");
        StateHasChanged();
    }

    
}
