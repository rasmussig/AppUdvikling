@page "/fetchdata"
@using Modul8_BlazorApp1.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<button @onclick="ToggleTemperatureUnit">Switch from Celcius to Farenheit</button>
<br />
<br />
Input how many weatherforecasts you want to see.
<input type="number" @bind="UserInput" />
<button @onclick="UpdateAmount2">Update</button>
<br />

<button @onclick="ShowMoreForecasts">Show 5 more</button>
<button @onclick="ShowMoreLess">Show 5 less</button>
<br />
<br />

<p>Here you can apply, a minimum and maximum temprature</p>

<input type="number" @bind="MinTemperature" placeholder="Minimum temprature">
<input type="number" @bind="MaxTemperature" placeholder="Maksimum temprature">
<button @onclick="ApplyTemperatureFilter">Use filter</button>



@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (@temperatureUnit)</th>
                <th>Summary</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
             @for (int i = 0; i < forecasts.Length; i++)
            {
                var forecast = forecasts[i];
                <tr style="background-color: @(i % 2 == 1 ? "gray" : "white")">
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@GetTemperatureInUnit(forecast)</td>
                    <td style="color: @(SummaryTextColor(forecast.Summary))">@forecast.Summary</td>
                    <td>@forecast.Location</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string temperatureUnit = "Celsius";
    private int UserInput = 10;

    private int MinTemperature = -20; 
    private int MaxTemperature = 55;  


    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}");
    }

    private string SummaryTextColor(string summary)
    {
        switch (summary)
        {
            case "Freezing":
            case "Cold":
                return "blue"; // Blå for "Freezing" og "Cold"
            case "Hot":
            case "Warm":
                return "darkred"; // Mørkerød for "Hot" og "Warm"
            default:
                return "green"; // Grøn for alle andre værdier
        }

        /*Ovenstående kan også skrives som if-statement:
        if (summary == "Freezing" || summary == "Cold")
              {
              return "blue"; // Blå baggrund for "Freezing" og "Cold"
               }
               else if (summary == "Hot" || summary == "Warm")
              {
              return "darkred"; // Mørkerød baggrund for "Hot" og "Warm"
               }
               else
               {
               return "green"; // Grøn baggrund for alle andre værdier
    }       */

    }

    private void ToggleTemperatureUnit()
    {
        if (temperatureUnit == "Celsius")
        {
            temperatureUnit = "Fahrenheit";
        }
        else
        {
            temperatureUnit = "Celsius";
        }
    }

    private int GetTemperatureInUnit(WeatherForecast forecast)
    {
        if (temperatureUnit == "Celsius")
        {
            return forecast.TemperatureC;
        }
        else
        {     
            return forecast.TemperatureF;
        }
    }

    private async void ShowMoreForecasts()
    {
        UserInput += 5;
        await UpdateAmount();

    }

    private async void ShowMoreLess()
    {
        UserInput -= 5;
        await UpdateAmount();

    }

    private async Task UpdateAmount()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}");
        StateHasChanged();
    }

    private async Task UpdateAmount2()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}");
        StateHasChanged();
    }

    private async Task ApplyTemperatureFilter()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>($"WeatherForecast/{UserInput}?minTemp={MinTemperature}&maxTemp={MaxTemperature}");
        StateHasChanged();
    }

    
}
