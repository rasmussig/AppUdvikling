@page "/todo"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Modul8_BlazorApp1.Client.Model


<PageTitle>Todo</PageTitle>

<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>  <!--Overskriften som også tæller hvor mange Todo der er markeret som done-->


<input placeholder="Something todo" @bind="newTodo" /> <!-- Inputfelt til at indtaste nye opgaver -->
<button @onclick="AddTodo">Add todo</button> <!-- Knappen til at tilføje en ny opgave -->
<button @onclick="UpdateLocalStorage">Save</button>
<button @onclick="ClearLocalStorage">Clear</button>


<ul>
    @foreach (var todo in todos)
    {
        <li>
            <InputCheckbox @bind-Value="todo.IsDone" 
                           @bind-Value:after="() => onToDoChanged(todo)"/>
                           <!-- Opretter en checkBox-komponent, værdien af check-boxen binder vi til todo.IsDone egenskaben, som er en bool i ToDoItem -->
                           <!--Ekstra funktionalitet, som gør at når check-box bliver ændret, vil metoden onToDoChanged blive kaldt, med en parameter som er den aktuuelle (todo) - opgave -->
            <InputText @bind-Value="todo.Title" /> <!-- Opretter inputfelt, og binder input til todo.Title, hvilket er en egenskab i vores objekt ToDoItem.cs-->
            <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => DeleteToDo(todo)" width="24" height="24" viewBox="0 0 8 8"><path fill="#900" d="M4 0C1.79 0 0 1.79 0 4s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4zM2.5 1.78L4 3.28l1.5-1.5l.72.72L4.72 4l1.5 1.5l-.72.72L4 4.72l-1.5 1.5l-.72-.72L3.28 4l-1.5-1.5l.72-.72z" /></svg>
            <!--Det her er bare en sej knap, når der trykkes på den bliver DeleteToDo metoden kaldt med input (todo)-->
        </li>
    }
</ul>


@code {
    private string? newTodo; //Variabel som skal holde styr på det brugeren ønsker at tilføje

    private List<ToDoItem> todos = new(); // Opretter en liste af objekterne "ToDoItem" og smækker dem i en liste kaldet "todos"

    private const string todoKey = "todo"; // OLE jeg fatter ik helt 100 hvad den her gør.

    protected override async Task OnInitializedAsync() //Denne metode indlæser tidligere gemte "Todos-lister" vha. LocalStorage
    {

        var x = await localStore.GetItemAsync<List<ToDoItem>>(todoKey);
        if (x != null)
            todos = x;
    }

    private void AddTodo()  //Metoden som bruges til at tilføje nye ToDoItem's til vores ToDo-liste
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new ToDoItem { Title = newTodo });
            newTodo = string.Empty;
        }
    }

    public async void UpdateLocalStorage()  //Her er funktionaliteten som gemmer todos-listen i local Storage
    {
        Console.WriteLine("UpdateLocalStorage");
        await localStore.SetItemAsync(todoKey, todos);
    }

    public async void ClearLocalStorage()  //Denne metode "Clear" vores local storage
    {
        todos.Clear();
        await localStore.RemoveItemAsync(todoKey);
        await localStore.ClearAsync();
    }

    public void onToDoChanged(ToDoItem todo)  //Denne metode udskriver blot til konsollen når vi ændre i check-box
    {
        Console.WriteLine("onToDoChanged " + todo.Title);

    }

    private void DeleteToDo(ToDoItem todo) //Denne metode bruger vi til vores seje knap, som fjerne TodoItem fra ToDo-listen
    {
        todos.Remove(todo);
    }


}










