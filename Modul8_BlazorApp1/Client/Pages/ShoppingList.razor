@page "/shoppinglist"
@using Modul8_BlazorApp1.Client.Model;
@using Modul8_BlazorApp1.Shared;
@inject HttpClient Http;


<h1 class="mb-3 mt-3">Shopping List</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Shop</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Done</th>
            <th>Delete</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in shoppingList)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Shop</td>
                <td>@item.Amount</td>
                <td>@item.Price</td>
                <td>
                    <InputCheckbox id="Done" @bind-Value="item.Done" @onclick="() =>UpdateShoppingItem(item) " class="form-check-input" />
                    @boolAsText(item.Done)
                </td>
                <td> <svg xmlns="http://www.w3.org/2000/svg" @onclick="() => DeleteItem(item)" width="24" height="24" viewBox="0 0 8 8"><path fill="#900" d="M4 0C1.79 0 0 1.79 0 4s1.79 4 4 4s4-1.79 4-4s-1.79-4-4-4zM2.5 1.78L4 3.28l1.5-1.5l.72.72L4.72 4l1.5 1.5l-.72.72L4 4.72l-1.5 1.5l-.72-.72L3.28 4l-1.5-1.5l.72-.72z" /></svg></td>
            </tr>
        }
    </tbody>
</table>

<p><strong>Total price: @CalculateTotalPrice()</strong></p>

<img src="busy.gif" style="display:@busyDisplayStyle" />

@code {

    private string busyDisplayStyle = "none";
    private ShoppingItem shoppingItem = new ShoppingItem();

    private ShoppingItem[]? shoppingList = new ShoppingItem[0];

    public string boolAsText(bool b)
    {
        return b ? "YES" : "NO";
    }

    protected override async Task OnInitializedAsync()
    {
        busyDisplayStyle = "block"; // tænd busy
        shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>("api/shopping/getall");
        busyDisplayStyle = "none"; // sluk busy
    }

    private decimal CalculateTotalPrice()
    {
        decimal sum = 0;

        foreach (var item in shoppingList)
        {
            sum += item.Price * item.Amount;
        }
        return sum;
    }

    private async Task DeleteItem(ShoppingItem item)
    {
        await Http.DeleteAsync($"api/shopping/delete/{item.Id}");

        shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>("api/shopping/getall");

        //StateHasChanged();
    }

    private async Task UpdateShoppingItem(ShoppingItem item)
    {
        item.Done = !item.Done;
        await Http.PutAsJsonAsync<ShoppingItem>($"api/shopping/update", item);

        //shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>("api/shopping/getall");

        //StateHasChanged();

    }

}